import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Sanjay Janardhan
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        out.println("<html>");
        out.println("<head>");
        int title = getChildElement(channel, "title");
        int description = getChildElement(channel, "description");
        int link = getChildElement(channel, "link");
        String titleString = "";
        out.println("   <title>");

        if (channel.child(title).numberOfChildren() > 0) {
            titleString = channel.child(title).child(0).label();
            out.println("       " + titleString);
        } else {
            out.println("       Empty Title");
        }
        out.println("   </title>");
//        out.println(
//                "<link href=\"https://fonts.googleapis.com/css?family=Comfortaa:400\" rel=\"stylesheet\"/>     <!--  comfortaa font import-->");
//        out.println(
//                "<style type=\"text/css\">body,h1,h2,h3,h4,h5,h6 {font-family: \"Comfortaa\", sans-serif;  } th, td {border:2px solid black;font-size: 24px;}</style>");

        out.println("</head>");

        out.println("<body>");

        out.println("<h1>");
        out.println("   <a href = \"" + channel.child(link).child(0).label()
                + "\">");
        out.println("       " + titleString);
        out.println("   </a>");
        out.println("</h1>");
        out.println("   <p>");

        if (channel.child(description).numberOfChildren() > 0) {
            out.println(
                    "       " + channel.child(description).child(0).label());
        } else {
            out.println("No Description Available");
        }
        out.println("   </p>");

        out.println("<table border=\"1\">");
        out.println("   <tr>");
        out.println("       <th>Date</th>");
        out.println("       <th>Source</th>");
        out.println("       <th>News</th>");
        out.println("   </tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        /*
         * TODO: fill in body
         */
        out.println("</table>\n</body>\n</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";
        /*
         * TODO: #1 - fill in body
         */

        int elementWithTag = -1;
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).label().equals(tag)) {
                elementWithTag = i;
            }

        }

        return elementWithTag;

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";
        /*
         * TODO: #3 - fill in body
         */
        out.println("   <tr>");

        // Checks and prints for publication date
        int pubDate = getChildElement(item, "pubDate");
        out.print("       <td>");
        if (pubDate >= 0 && item.child(pubDate).numberOfChildren() > 0) {
            out.print(item.child(pubDate).child(0).label());
        } else {
            out.print("No Date Available");
        }
        out.println("</td>");

        // Checks and prints for source
        int source = getChildElement(item, "source");
        out.print("       <td>");
        if (source >= 0 && item.child(source).numberOfChildren() > 0) {
            out.print("<a href = \"" + item.child(source).attributeValue("url")
                    + "\">" + item.child(source).child(0).label() + "</a>");
        } else {
            out.print("No Source Available");
        }
        out.println("</td>");

        // Checks and prints for title, and prints description if not available.
        int title = getChildElement(item, "title");
        String titleDescriptionString = "";
        if (title >= 0 && item.child(title).numberOfChildren() > 0) {
            titleDescriptionString = item.child(title).child(0).label();
        } else {
            titleDescriptionString = "No Title Available";
        }

        int link = getChildElement(item, "link");
        String linkString = "";

        if (link >= 0) {
            linkString = "href = \"" + item.child(link).child(0).label();
        }
        out.print("       <td>");
        out.print("<a " + linkString + "\">" + titleDescriptionString + "</a>");
        out.println("</td>");
        out.println("   </tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {

        SimpleWriter output = new SimpleWriter1L(file);

        /*
         * Read XML input and initialize XMLTree. If input is not legal XML,
         * this statement will fail.
         */
        XMLTree xml = new XMLTree1(url);
        /*
         * Extract <channel> element.
         */
        XMLTree channel = xml.child(0);

        outputHeader(channel, output);

        int items = channel.numberOfChildren();
        for (int i = 0; i < items; i++) {
            if (channel.child(i).label().equals("item")) {
                processItem(channel.child(i), output);
            }
        }

        outputFooter(output);

        output.close();

        out.println("Finished generating html for " + url);

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        SimpleWriter indexFile = new SimpleWriter1L("index.html");

        String rssListUrl = "feeds.xml";
        XMLTree main = new XMLTree1(rssListUrl);
        String title = main.attributeValue("title");
        indexFile.print("<html>\n\t<head>\n\t\t<title>" + title
                + "</title>\n\t</head>\n\t<body>\n\t\t<h2>" + title
                + "</h2>\n\t\t<ul>\n");

        for (int i = 0; i < main.numberOfChildren(); i++) {
            String url = main.child(i).attributeValue("url");
            String name = main.child(i).attributeValue("name");
            String file = main.child(i).attributeValue("file");
            indexFile.println(
                    "\t\t\t<li><a href=\"" + file + "\">" + name + "</a></li>");
            processFeed(url, file, out);

        }

        indexFile.println("\t\t</ul>\n\t</body>\n</html>");

        // Close output streams
        indexFile.close();
        in.close();
        out.close();
    }

}
